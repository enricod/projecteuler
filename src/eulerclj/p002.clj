(ns eulerclj.p002
  (:use eulerclj.euler)
  (:use clojure.test))

; ============================ PROBLEMA 002 ============================


; Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
; By starting with 1 and 2, the first 10 terms will be:
;
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;
; By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
; find the sum of the even-valued terms.



(defn less-than-four-million? [n]
  (< n 4000000))

(defn p002A []
  (reduce + (filter even? 
  (take-while less-than-four-million? (lazy-seq-fibo)))))

; con closure
(defn p002B []
  (reduce + 
    (filter even? 
      (take-while (fn [n] (< n 4000000)) (lazy-seq-fibo )))))

; con closure e notazione breve
(defn p002C []
  (reduce + (filter even? (take-while #(< % 4000000) (lazy-seq-fibo )))))


(deftest test-p002A
  (is (= 4613732 (p002A))))

(deftest test-p002B
  (is (= 4613732 (p002B))))

(deftest test-p002C
  (is (= 4613732 (p002C))))
  
(defn -main
    "Risolve p002"
    [& args]
    (println "p002 A ="  (p002A))
    (println "p002 B ="  (p002B))
    (println "p002 C ="  (p002C)))
